# This workflow builds and pushes a Docker image for a canary feature deployment.
name: Canary Feature Deployment

# Manual trigger with optional input for naming the experiment/feature
on:
  workflow_dispatch:
    inputs:
      experiment_name:
        description: 'Optional: Custom name for this experiment/feature tag (e.g., "new-sentiment-model"). If empty, the branch name will be used.'
        required: false
        type: string

# Environment variables for container registry, tags and Git configuration
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  CANARY_TAG: canary # The stable tag for your experimental deployment slot
  GIT_USER_NAME: "github-actions[bot]"
  GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"

# Permissions needed for pushing container images and creating tags
permissions:
  contents: write
  packages: write

jobs:
  # Job that builds and deploys the canary version
  build-and-push-canary:
    runs-on: ubuntu-latest

    steps:
    # Determines the feature tag name from user input or branch name
    - name: Determine Feature Tag Name
      id: feature_tag_name
      run: |
        INPUT_NAME="${{ github.event.inputs.experiment_name }}"
        BRANCH_NAME="${{ github.ref_name }}"

        if [ -n "$INPUT_NAME" ]; then
          RAW_NAME="$INPUT_NAME"
        else
          RAW_NAME="$BRANCH_NAME"
        fi

        # Sanitize the raw name (remove refs/heads/, replace slashes, etc.)
        SANITIZED_NAME=$(echo "$RAW_NAME" | sed 's#refs/heads/##g' | tr -s '/' '-' | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/^-*//;s/-*$//')
        # Ensure it's not empty after sanitization, default to 'feature' if it is
        if [ -z "$SANITIZED_NAME" ]; then
          SANITIZED_NAME="feature"
        fi
        echo "feature_tag=${SANITIZED_NAME}" >> $GITHUB_OUTPUT
        echo "Determined feature tag: ${SANITIZED_NAME}"

    # Creates the version tag name to be used in multiple steps
    - name: Set Version Tag
      id: version_tag
      run: |
        VERSION_TAG="version.beta-${{ steps.feature_tag_name.outputs.feature_tag }}"
        echo "tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "Created version tag: ${VERSION_TAG}"

    # Checks out the repository code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Sets up QEMU for multi-architecture builds
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Sets up Docker buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Prepares metadata for container image including tags and labels
    - name: Generate image metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version_tag.outputs.tag }}
          type=raw,value=${{ env.CANARY_TAG }}
        flavor: |
          latest=false

    # Authenticates with GitHub Container Registry for pushing images
    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Builds and pushes the multi-architecture container image
    - name: Build & push Docker image
      uses: docker/build-push-action@v5
      with:
        context: . 
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version_tag.outputs.tag }}
        cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max,image-manifest=true

    # Sets up Git identity for automated commits
    - name: Configure Git
      run: |
        git config user.name "${{ env.GIT_USER_NAME }}"
        git config user.email "${{ env.GIT_USER_EMAIL }}"
        git remote set-url origin git@github.com:${{ github.repository }}.git

    # Sets up SSH for pushing changes to the repository
    - name: Setup SSH for pushing
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}

    # Creates a Git tag for tracking this feature version
    - name: Create Git tag for feature branch
      run: |
        echo "Creating tag: ${{ steps.version_tag.outputs.tag }}"
        git tag -a "${{ steps.version_tag.outputs.tag }}" -m "Canary feature deployment for ${{ steps.feature_tag_name.outputs.feature_tag }}"
        git push origin "${{ steps.version_tag.outputs.tag }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Outputs helpful information about the deployed images
    - name: Output image tags
      run: |
        echo "Pushed image with tags: ${{ steps.meta.outputs.tags }}"
        echo "-------------------------------------------------------------------------"
        echo "Image for this specific feature/experiment: ${{ env.IMAGE_NAME }}:${{ steps.feature_tag_name.outputs.feature_tag }}"
        echo "Image for the canary deployment slot:       ${{ env.IMAGE_NAME }}:${{ env.CANARY_TAG }}"
        echo "-------------------------------------------------------------------------"
        echo "Update your Kubernetes experimental deployment to use: ${{ env.IMAGE_NAME }}:${{ env.CANARY_TAG }}"